import React, {useEffect, useState} from 'react';
import {
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
  Image,
  FlatList,
  TouchableHighlight,
} from 'react-native';
import screenString from '../../constants/screens';
import GlobalHeader from '../../components/Header/Header';

import styles1 from '../../components/Header/styles';
import Icon from 'react-native-vector-icons/MaterialIcons';
import SimpleLineIcons from 'react-native-vector-icons/SimpleLineIcons';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import styles from './styles';
import GlobalContainer from '../../components/Container/Container';
import GlobalButton from '../../components/Button/Button';
import GlobalTag from '../../components/Tag/Tag';
import MangaService from '../../services/MangaService';

export default function SubScreen({route, navigation}) {
  const {name, id} = route.params;

  const [contentActive, setContentActive] = useState(false);
  const [isFollowing, setIsFollowing] = useState(false);
  const [listFollowing, setListFollowing] = useState([]);

  const [refreshing, setRefreshing] = React.useState(false);

  let [info, setInfo] = useState([]);

  useEffect(() => {
    if (!refreshing) {
      MangaService.infoManga(id).then(data => {
        setInfo(data);
        if (refreshing) {
          setRefreshing(false);
        }
      });
    }
  }, [refreshing]);

  const data = [
    {
      comicChapter: 'Ch∆∞∆°ng 1',
      comicDateUpdate: '10 ph√∫t tr∆∞·ªõc',
    },
    {
      comicChapter: 'Ch∆∞∆°ng 2',
      comicDateUpdate: '20 ph√∫t tr∆∞·ªõc',
    },
  ];

  const mota =
    'Sau khi nh√≥m nh·∫°c nam h√†ng ƒë·∫ßu ho√†n to√†n ch√¨m ngh·ªâm, Yeon Seo Ho, ng∆∞·ªùi ph·ª• tr√°ch v·∫ª ƒë·∫πp c·ªßa nh√≥m, tr·ªü th√†nh m·ªôt di·ªÖn vi√™n c√≥ m√°u m·∫∑t trong gi·ªõi, c√≤n anh ƒë·ªôi tr∆∞·ªüng c√≥ g∆∞∆°ng m·∫∑t b√¢y bi, sau khi xu·∫•t ng≈©, bi·∫øn th√†nh m·ªôt k·∫ª v√¥ c√¥ng r·ªói ngh·ªÅ. B·∫•y gi·ªù Yeon Seo Ho l·∫°i ƒë·∫øn t·∫≠n nh√†‚Ä¶ ∆† k√¨a! Ch·∫≥ng ph·∫£i ch√∫ng ta ƒë√£ kh√¥ng c√≤n gh√©p CP n·ªØa hay sao?';

  const type = ['Manga', 'Yuri', 'Manhwa'];
  let type2 = info.suggest_type || ";";
  // console.log()

  const renderItemChapter = ({item: chapter}) => {
    return (
      <TouchableHighlight
        underlayColor="#E1DCDC"
        onPress={() => onChapterPressed(chapter)}>
        <View style={styles.rowItemChapter}>
          <Text style={styles.item_soChuong}>{chapter.comicChapter}</Text>
          <Text style={styles.item_capNhat}>{chapter.comicDateUpdate}</Text>
        </View>
      </TouchableHighlight>
    );
  };

  const mangaKeyExtractor = chapter => {
    return chapter.comicChapter;
  };

  const activeContent = title => {
    switch (title) {
      case 'content':
        setContentActive(true);
        break;
      case 'chapters':
        setContentActive(false);
        break;
    }
  };

  return (
    <GlobalContainer>
      {/* header */}
      <GlobalHeader
        navigation={navigation}
        showLeftButton={true}
        showRightButton={true}
        children={<Text style={styles1.title_header}>{name}</Text>}
      />
      <View style={styles.container}>
        {/* tom tat truyen  */}
        <View style={styles.truyen_container}>
          {/* thumbnai */}
          <Image
            style={styles.thumbnai}
            source={{
              uri: info.image,
            }}
          />

          {/* info */}
          <View style={styles.info}>
            {/* ten truyen */}
            <Text style={styles.mangaName}>{name}</Text>

            {/* Ten kh√°c */}
            <Text style={styles.otherMangaName}>
              T√™n kh√°c: {info.other_name}
            </Text>

            {/* Ten tac gia */}
            <Text style={styles.autherName}>T√™n t√°c gi·∫£: {info.author}</Text>

            {/* Trang thai */}
            <Text style={styles.status}>Tr·∫°ng th√°i: {info.status}</Text>

            {/* tag the loai truyen */}
            <GlobalTag data={type2.split(";")} />

            {/* Luot doc, thich */}
            <View style={styles.viewLike_container}>
              {/* views */}
              <View style={styles.views_container}>
                <SimpleLineIcons name="eye" style={styles.eyeIcon} />
                <Text style={styles.views}>{info.viewcounts} l∆∞·ª£t xem</Text>
              </View>
              {/* likes */}
              <View style={styles.likes}>
                <Text style={styles.numberOfLike}>2.000</Text>
                <SimpleLineIcons name="like" style={styles.likeIcon} />
              </View>
            </View>
          </View>
        </View>

        {/* menu tab */}
        <View style={styles.menuTabContainer}>
          <TouchableOpacity
            style={styles.menuTabItem}
            onPress={() => activeContent('content')}>
            <View>
              <Text
                style={
                  contentActive ? styles.contentActive : styles.contentNotActive
                }>
                INTRODUCE
              </Text>
            </View>
          </TouchableOpacity>

          <View style={{width: 1, backgroundColor: 'gray'}} />

          <TouchableOpacity
            style={styles.menuTabItem}
            onPress={() => activeContent('chapters')}>
            <View>
              <Text
                style={
                  contentActive ? styles.contentNotActive : styles.contentActive
                }>
                MENU
              </Text>
            </View>
          </TouchableOpacity>
        </View>

        <View style={{flex: 1}}>
          {contentActive ? (
            <View>
              <View style={styles.tomTatTruyen_button}>
                <Text style={{marginVertical: 5, color: 'black'}}>M√¥ t·∫£</Text>
                <Icon name="info" style={styles.iconContent} />
                {/* <Text style={styles.iconContent}>üñ§</Text> */}
              </View>
              <View style={styles.tomTatTruyen_container}>
                <Text style={{color: 'red'}}>{info.description}</Text>
              </View>
            </View>
          ) : (
            <View style={styles.tabListChapterContainer}>
              <View style={styles.headerItemChapter}>
                <Text style={styles.headerItem_soChuong}>T√™n ch∆∞∆°ng</Text>
                <Text style={styles.headerItem_capNhat}>C·∫≠p nh·∫≠t</Text>
              </View>

              <FlatList
                data={data}
                renderItem={renderItemChapter}
                keyExtractor={mangaKeyExtractor}
              />
            </View>
          )}
        </View>
      </View>

      {/* theo doi button */}
      <View style={styles.buttonContainer}>
        <GlobalButton
          style={styles.buttonFollow}
          type="outlinePrimary"
          locKey={
            isFollowing ? 'MangaScreen.following' : 'MangaScreen.button_follow'
          }
          onPress={{}}>
          <Text>Theo d√µi</Text>
        </GlobalButton>
      </View>
    </GlobalContainer>
  );

  // return (
  //   <View style={styles.container}>
  //     <GlobalHeader
  //       navigation={navigation}
  //       showLeftButton={true}
  //       showRightButton={true}
  //       children={<Text style={styles1.title_header}>{name}</Text>}
  //     />
  //     <View style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}>
  //       <Text style={{fontSize: 26, fontWeight: 'bold', color: 'black'}}>
  //         ƒê√¢y l√† TRANG INFO TRUY·ªÜN
  //       </Text>
  //       <Text
  //           onPress={() => navigation.navigate(screenString.SUB+"2")}
  //           style={{fontSize: 26, fontWeight: 'bold', color: 'green'}}>
  //           V√†o trang ƒê·ªåC TRUY·ªÜN
  //         </Text>
  //     </View>
  //   </View>
  // );
}

// const styles = StyleSheet.create({
//   container: {
//     flex: 1,
//   },
// });
